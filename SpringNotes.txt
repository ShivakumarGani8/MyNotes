Spring Framework
	Spring is a depency injection framework work of java which injects the dependencies to make java classess loosely coupled

Ways of injection dependencies
1] Using XML configuration
2] Using Annotation

1] Using XML configuration
	1) Dependency injection Using setter injection
	2) Dependency injection Using constructor injection

1) Dependency injection Using setter injection
-Let's say we have a class Student which have properties studentName, studentId, studentAddress.
-Now we have to create setters for all the properties in Student class
-We have to create a xml in src folder
 Example: config.xml (This name may be anything)

A. Including xmln schema's
step1 ->create xml file in src of java
step2 ->Include schemas EX: Here we are included beans for p-schema
<beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
 xmlns:p="http://www.springframework.org/schema/p"
 xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans.xsd">
</beans>

B. Injecting Primitive types
step 1 -> property injection using setter injection
    1. Using property & value
 <bean class="com.springcore.Student" name="student1">
 	<property name="studentId">
 		<value>1234</value>
 	</property>
 	<property name="studentName" value="Shivakumar" />
 	<property name="studentAddress">	
 		<value>Jamakhandi Karnataka</value>
 	</property>
 </bean>
    
    2. Using p-schema
 <bean class="com.springcore.Student" name="student2" p:studentName="Sudeep" p:studentId="1235" p:studentAddress="Linganur"/>
 
step 2 -> setting in App class
-create object for ClassPathXmlApplicationContext and we can getBean using getBean()
ApplicationContext context=new ClassPathXmlApplicationContext("config.xml");
        Student student1=(Student) context.getBean("student1");

-----------------------------------------------------------------------------------------------------

C. Injecting Collection types
1. Injecting List:
	<!--Injection List type-->
 	<property name="phones">
 		<list>
 			<value>7760776517</value>
 			<value>7676478324</value>
 			<value>9980496689</value>
 		</list>
 	</property>

2. Injecting Set
	<!-- Injecting Set type -->
	<property name="addresses">
		<set>
			<value>Jamakhandi</value>
			<value>Linganur</value>
			<value>Jamakhandi</value>
		</set>
	</property>

3. <!-- Injecting Map type -->
	<property name="courses">
		<map>
			<entry key="Java" value="2 Month's"/>
			<entry key="Python" value="1.5 Month's"/>
			<entry key="C" value="1 Month"></entry>
		</map>
	</property>

-----------------------------------------------------------------------------------------------------

D. Injecting Reference types
Lets say we have 2 classes name Engine & Car which have properties stroke, cc, volume & color, price, drive, engine respectivly. Where Car is dependent upon Engine

Step 1-> Set properties of Engine.
Step 2-> Inject the properties and bean created previously for Engine
	Now we can inject property of Engine with the help of
	A. Using property & ref tag
		<property name="engine">
		<ref bean="engine_bean_name"/>
		</property>
	
	B. Using ref as a attribute to property tag
		<property name="engine" ref="engine_bean_name" />
	
	C. Using p-schema
		<bean class="com.springcore.refinjection.Car name="car1" p:color="red" p:price="10.5L" p:drive="4WD" p:engine-ref="engine_bean_name" />
-----------------------------------------------------------------------------------------------------

2) Dependency injection Using constructor injection

	A. Using constructor-arg & value
	<bean class="class_name" name="bean_name">
		<constructor-arg>
			<value>value_ToBe_Set</value>
		</constructor-arg>
		<constructor-arg>
			<value>value_ToBe_Set</value>
		</constructor-arg>
	</bean>

	B. Using constructor-arg
	<bean class="class_name" name="bean_name>
		<constructor-arg value="value_ToBe_Set">
		<constructor-arg value="value_ToBe_Set">
	</bean>

	C. Using c-schema
	<bean class="class_name" name="bean_name" c-property="value_ToBe_Set" c-property="value_ToBe_Set" />

***Ambiguity problems for constructor injection***
While injecting it'll consider all the args as a String type hence, The following issues may occour
->Here the highest prefrence will be given to constructor with arguments of String type.
->If String args does not exist the prefrence will be given to 1st occuring constructor.
->We can overcome this issue by specifying the type of arg in xml itself
	<constructor-arg value="value_ToBe_Set" type="Data_type_of_argument">
->Even we can specify the index of the argumenet in constructor-arg tag
	<constructor-arg value="value_ToBe_Set" type="Data_type_of_argument" index="Index_Of_argument">
_____________________________________________________________________________________________________
Life Cycle Methods of Spring bean
-> Spring provides two important methods for every bean
	public void init()->To intialize bean
	public void destroy()->To clear bean
	-We can change the name of the above methods but, we should keep the signature same

-> Life cycle
	1. Creates object of bean provided
	2. Intialize/sets properties of bean
	3. Calls init()/provided method
	4. Then we can read and use the bean
	5. Calls destroy()
	6. Destroyes the bean

-> Configure technique
	1. Using XML
	2. Spring interface
	3. Java Annotation

	1.Implmenting bean lifecycle using XML
	Step 1-> Create intialize method in bean class this name may be anything.
	Step 2-> Create destroy method in bean class this name may be anything.
	Step 3-> Specify the intialize and destroy methods in xml bean with the help of init-method and destroy-method attributes
		Example: <bean class="class_name" name="bean_name" init-method="intialize_method_name" destroy-method="destroy_method_name">
	Step 4-> Register destroy hook using registerShutdownHook()
	The registerShutdownHook method exists in AbstractApplicationContext interface
	we can create object for AbstractApplicationContext and use

	2.Implementing bean lifecycle using interface
	Step 1-> Implement two interfaces IntializingBean(acts as init()) & DisposibleBean(acts as destroy())
	Step 2-> override the methods of these interfaces in bean class
	Step 3-> Register destroy hook using registerShutdownHook()
	The registerShutdownHook method exists in AbstractApplicationContext interface
	we can create object for AbstractApplicationContext and use

	3.Implementing bean lifecycle using Annotation
	Step 1-> Use annotations PostConstructor(Acts as init()) & PreDestroy(Acts as destroy())
	Step 2-> Import annotations in Configure.xml
	Step 3-> Register destroy hook using registerShutdownHook()
	The registerShutdownHook method exists in AbstractApplicationContext interface
	we can create object for AbstractApplicationContext and use

_____________________________________________________________________________________________________
Autowiring in Spring
	-Feature of spring framework in which spring container which injects dependencies automatically.
	-Autowiring can't be used for Primitive and String types. We can only use it with reference types.

->Types of Autowiring
	1. XML => with modes 
			a. no(by default)
			b. byName(by name of bean)
			c. byType(by type of bean)
			d. constructor(with constructor)
			e. autodetect(deprecated since spring 3)

	2. Annotation=> @Autowired

	1. XML =>
		a.byname-> It'll search for the bean with same name as that of property in bean class inside config.xml and matches both
			<bean name="bean_name" autowire="byName">
		b.byType-> It'll search for the bean type with the same type of property inside config.xml and mathces
			<bean name="bean_name" autowire="byType">
		c.constructor->
			<bean name="bean_name" autowire="constructor">

	2. Annotation @Autorwired
		-We can define @Autorwired in 3 Ways
		a. Before the property
		b. Before the setter
		c. Before the constructor
		-@Qualifier("bean_name")-> We can specify bean name using @Qualifier which maps the bean with specified name

_____________________________________________________________________________________________________
Standalone collections
	-With the help of Standalone we can create a bean for list and we can use it again and again throughout the file with the help of id of bean defined
	EXamples:
	-> Standalone List
 		<util:list list-class="java.util.ArrayList" id="address">
 				<value>Jamakhandi</value>
 				<value>Mudhol</value>
 				<value>Bagalkote</value>
 		</util:list>
 	-> Standalone Set
 		<util:set set-class="java.util.HashSet" id="phone_number">
 			<value>1234567890</value>	
 			<value>1245678933</value>	
 			<value>1234567890</value>
 			<value>7894561237</value>
 		</util:set>
 	-> standalone Map
 		<util:map map-class="java.util.HashMap" id="courses">	
 			<entry key="1"><value>Java</value></entry>	
 			<entry key="2"><value>Python</value></entry>	
 			<entry key="3"><value>C</value></entry>
 		</util:map>

_____________________________________________________________________________________________________
stereotype Annotation
	-stereotype annotations help us to create an object of the class directly with the help of @component annotations
	If we mention @component before the class name it will create object of the class in camelcase format and we can use @value before the property to define the property of he class
	Example:
		@Component
			public class Car {
				@Value("Red")
				private String colorString;
				@Value("10.5")
				private double price;
				@Override
				public String toString() {
					return "Car [colorString=" + colorString + ", price=" + price + " Lakhs]";
				}	
			}
	-Even we can change name of the class object using @component("object_name")
	Example:
		@Component("carObject")
			public class Car {
				@Value("Red")
				private String colorString;
				@Value("10.5")
				private double price;
				@Override
				public String toString() {
					return "Car [colorString=" + colorString + ", price=" + price + " Lakhs]";
				}	
			}
	While using the object we can use carObject in driver class

	-> In config file we have to mention 
	<context:component-scan base-package="com.springcore.stereotype"/> to scan particular package before using stereotype annotaions

	->Injecting collection types using spEL
	we can inject collections into class using spEL by defining standalone collection in config file.
	Example:
	@Value("#{emailId}")
	private Set<String> emailID;
_____________________________________________________________________________________________________
Spring bean scope
	-> By default the scope of the spring bean will be singleton(i.e the same object will be sent each time we call the bean).
	-> We can change the scope of the bean with the help of scope attribute
	Example: scope of bean changed to prototype(i.e. Each time we call the bean new object will be sent)
		-Using xml
			<bean class="com.springcore.beanscope.BeanScope" name="scope2" scope="prototype"/>
		-Using stereotype
			@Scope("prototype")
			@Component("beanObject")
			public class StereoTypeBean {
				public int getHashCode() {
					return this.hashCode();
				}
			}
_____________________________________________________________________________________________________
Spring Expression Language
	->Helps in parsing and executiong of expression with the help of @value Annotation
	Expressions such as	
		-Methods, Classes, constructor and objects
		-char, numerics, operators, keywords and special symbols which return a value
	The resolved expression inside @Value is executed and assigned to the variable below
	- Using expressions
		@Value("{expression}")
	- Using static methods and variables
	 	@Value("#{T(class_name).method_name/variable_name}")
	- Using non static methods and variables
	 	@Value("{new class_name().method_name/variable_name}")
	
	Examples:
	//Assigning expression inside @value
	@Value("#{19+123}")
	int x;
	//Assigning static methods
	@Value("#{T(java.lang.Math).sqrt(16)}")
	int sqrt;
	
	//Assigning static variable
	@Value("#{T(java.lang.Math).PI}")
	double pi;

	//Assigning non static method
	@Value("#{new String('Shivakumar')}")
	String nameString;

=====================================================================================================
2]Configuration bean with Java configuration(bean without XML)
	We can configure java bean in two ways without the xml
	1) With the help of @ComponentScan and @Component
		-> Here we can configure a java class to scan package instead of xml with the help ComponentScan annotation
		Syntax:
			@ComponentScan(basePackages="package_name_ToBe_Scan")
			class name{}
		Example:
				@ComponentScan(basePackages = "com.springcore.noxml")
				public class JavaConfig {
				}
			-In the above example we'll be scanning package named as com.springcore.noxml. It'll scan hole defined package and searches for Component tag
			We'll be defining @Component annotation to the class which has to be scanned
			Example:			
				@Component
				public class NoXML {}
			-> In client class we can use these beans with the help of AnnotationConfigApplicationContext class
		Example:
			AnnotationConfigApplicationContext con= new AnnotationConfigApplicationCont(JavaConfig.class);
			WithComponent obj1= con.getBean("withComponent",WithComponent.class);
			System.out.println(obj1);
		

	2) Without the @Component and @ComponentScan
		-> Here we can configure a java configuration class with the help of @Configuration annotation instead of @ComponentScan which acts as a Configuration file.
		-> We can define methods with @Bean which will be responsible for creating and returing an object of bean class required
		Example:
			@Configuration
			public class JavaConfig {
				@Bean
				public WithoutComponent getObject() {
					return new WithoutComponent();
				}
			}
		Whenever we call the methout getObject it'll return the object of the required class.
		-> In client class we can use these beans with the help of AnnotationConfigApplicationContext class
		Example:
			AnnotationConfigApplicationContext con= new AnnotationConfigApplicationContext(JavaConfig.	class);
			WithoutComponent obj2= con.getBean("getObject",WithoutComponent.class);
			System.out.println(obj2);

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Spring JDBC
	Spring JDBC is a popwerful mechanism to connect and execute the queries to database
	-> It makes use of spring JDBC module to fire queries with the help of JdbcTemplate class
	-> important methods of JdbcTemplate
		-update()->  insert, update and delete queries
		-execute()-> select queries
	*****Connect to database*****

	- Connecting to database with XML
	Step 1-> Set properties of DriverManagerDataSource
	We can connect to database by setting the 4 properties of the database i.e. DriverClass, url, username & password
	Example: Set properties using property/p-schema
	<bean class="org.springframework.jdbc.datasource.DriverManagerDataSource" name="dataSource">
 		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
 		<property name="url" value="jdbc:mysql://localhost:3306/springjdbc"/>
 		<property name="username" value="root"/>
 		<property name="password" value="Shiva@9980"/>
 	</bean>

	Step 2-> Set objecect for JdbcTemplate using property/ p-schema
	<bean class="org.springframework.jdbc.core.JdbcTemplate" name="jdbcTemplate" p:dataSource-ref="dataSource"/>

	Step 3-> Create object for ClassPathXmlApplicationContext
	prepare a query and update
	Example: Inserting into table
        String query="insert into Student(id,name,city) value(?,?,?)";
        int result= jdbc.update(query,3,"Sudeep","Linganur");
	Updating a table
		String query="update student set name=?, city=? where id=?";
		jdbcTemplate.update(query,student.getName(), student.getCity(),student.getId());
	Deleting a table 
		String query="delete from Student where id=?";
		jdbcTemplate.update(query,id);

	Selecting from table with the help of RowMapper
		-For retrieving the data we have two methods in JdbcTemplate
		1. queryForObject(query, RowMapper<T> ,parameters); -> For single object
		Example:
			String query="select * from student where id=?";
			RowMapper<Student> rowMapper=new RowMapperImpl();
			jdbcTemplate.queryForObject(query, rowMapper,id);

		2. queryForObject(query, RowMapper<T>);-> For multiple objects
			String query= "select * from Student";
			List<Student> students= jdbcTemplate.query(query, new RowMapperImpl());
		
		RowMapper is an interface of java which returns the object of the result returned from the query.
		-We have to provide implmentation class for the RowMapper and logic inside rowMap method of rowMap to return the object
 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++